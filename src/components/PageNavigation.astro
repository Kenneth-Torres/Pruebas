---
export interface Props {
  currentPage: string;
}

const { currentPage } = Astro.props;

const pages = [
  { name: 'Inicio', path: '/', icon: 'home', color: 'from-gray-500 to-gray-600' },
  { name: 'Frontend', path: '/frontend', icon: 'monitor', color: 'from-blue-500 to-purple-600' },
  { name: 'Backend', path: '/backend', icon: 'server', color: 'from-green-500 to-teal-600' },
  { name: 'Mobile', path: '/mobile', icon: 'smartphone', color: 'from-pink-500 to-rose-600' },
  { name: 'Testing', path: '/testing', icon: 'check-circle', color: 'from-orange-500 to-yellow-600' }
];

const currentIndex = pages.findIndex(page => page.name === currentPage);
const previousPage = currentIndex > 0 ? pages[currentIndex - 1] : null;
const nextPage = currentIndex < pages.length - 1 ? pages[currentIndex + 1] : null;
---

<nav class="flex items-center justify-between p-6 bg-slate-800/30 rounded-xl border border-slate-700/50 backdrop-blur-sm mt-8">
  <!-- Previous Page -->
  <div class="flex-1">
    {previousPage && (
      <a 
        href={previousPage.path} 
        class="group flex items-center space-x-3 text-gray-400 hover:text-white transition-colors duration-300"
      >
        <div class={`p-2 rounded-lg bg-gradient-to-br ${previousPage.color} opacity-70 group-hover:opacity-100 transition-opacity`}>
          <i data-feather="chevron-left" class="w-5 h-5 text-white"></i>
        </div>
        <div class="text-left">
          <p class="text-xs uppercase tracking-wider">Anterior</p>
          <p class="font-semibold group-hover:text-white">{previousPage.name}</p>
        </div>
      </a>
    )}
  </div>

  <!-- Page Indicators -->
  <div class="flex items-center space-x-2 mx-8">
    {pages.map((page, index) => (
      <a 
        href={page.path} 
        class={`w-3 h-3 rounded-full transition-all duration-300 ${
          page.name === currentPage 
            ? `bg-gradient-to-r ${page.color} scale-125` 
            : 'bg-gray-600 hover:bg-gray-500 hover:scale-110'
        }`}
        title={page.name}
      ></a>
    ))}
  </div>

  <!-- Next Page -->
  <div class="flex-1 flex justify-end">
    {nextPage && (
      <a 
        href={nextPage.path} 
        class="group flex items-center space-x-3 text-gray-400 hover:text-white transition-colors duration-300"
      >
        <div class="text-right">
          <p class="text-xs uppercase tracking-wider">Siguiente</p>
          <p class="font-semibold group-hover:text-white">{nextPage.name}</p>
        </div>
        <div class={`p-2 rounded-lg bg-gradient-to-br ${nextPage.color} opacity-70 group-hover:opacity-100 transition-opacity`}>
          <i data-feather="chevron-right" class="w-5 h-5 text-white"></i>
        </div>
      </a>
    )}
  </div>
</nav>

<!-- Quick Navigation Shortcut -->
<div class="fixed bottom-6 right-6 z-50">
  <div class="relative">
    <button 
      id="quick-nav-toggle"
      class="p-3 bg-purple-600 hover:bg-purple-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
    >
      <i data-feather="compass" class="w-5 h-5"></i>
    </button>
    
    <div id="quick-nav-menu" class="absolute bottom-full right-0 mb-2 bg-slate-800 rounded-xl border border-slate-700 shadow-xl backdrop-blur-sm opacity-0 scale-95 transition-all duration-300 pointer-events-none">
      <div class="p-3 space-y-2">
        {pages.map(page => (
          <a 
            href={page.path}
            class={`flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors hover:bg-slate-700 ${
              page.name === currentPage ? 'bg-slate-700 text-white' : 'text-gray-300'
            }`}
          >
            <i data-feather={page.icon} class="w-4 h-4"></i>
            <span class="text-sm font-medium whitespace-nowrap">{page.name}</span>
          </a>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const quickNavToggle = document.getElementById('quick-nav-toggle');
  const quickNavMenu = document.getElementById('quick-nav-menu');
  
  if (quickNavToggle && quickNavMenu) {
    let isOpen = false;
    
    quickNavToggle.addEventListener('click', () => {
      isOpen = !isOpen;
      
      if (isOpen) {
        quickNavMenu.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
        quickNavMenu.classList.add('opacity-100', 'scale-100');
        quickNavToggle.style.transform = 'rotate(45deg)';
      } else {
        quickNavMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        quickNavMenu.classList.remove('opacity-100', 'scale-100');
        quickNavToggle.style.transform = 'rotate(0deg)';
      }
    });
    
    // Close on click outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#quick-nav-toggle') && !e.target.closest('#quick-nav-menu')) {
        isOpen = false;
        quickNavMenu.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
        quickNavMenu.classList.remove('opacity-100', 'scale-100');
        quickNavToggle.style.transform = 'rotate(0deg)';
      }
    });
  }
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey || e.metaKey) {
      const pages = {
        '1': '/',
        '2': '/frontend', 
        '3': '/backend',
        '4': '/mobile',
        '5': '/testing'
      };
      
      if (pages[e.key]) {
        e.preventDefault();
        window.location.href = pages[e.key];
      }
    }
  });
});
</script>