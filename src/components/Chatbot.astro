---
export interface Props {
  currentPage?: string;
}

const { currentPage = "DevVault" } = Astro.props;
---

<!-- Chatbot Widget -->
<div id="chatbot-container" class="fixed bottom-6 right-6 z-50">
  <!-- Chatbot Toggle Button -->
  <button 
    id="chatbot-toggle"
    class="w-14 h-14 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 flex items-center justify-center group"
  >
    <i data-feather="message-circle" class="w-6 h-6 group-hover:scale-110 transition-transform"></i>
    <div class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center">
      <span class="text-xs text-white font-bold" id="unread-count">1</span>
    </div>
  </button>

  <!-- Chatbot Window -->
  <div 
    id="chatbot-window"
    class="absolute bottom-16 right-0 w-80 h-96 bg-slate-800 rounded-2xl border border-slate-700 shadow-2xl backdrop-blur-sm opacity-0 scale-95 transition-all duration-300 pointer-events-none overflow-hidden"
  >
    <!-- Header -->
    <div class="bg-gradient-to-r from-purple-600 to-blue-600 p-4 rounded-t-2xl">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
            <i data-feather="cpu" class="w-4 h-4 text-white"></i>
          </div>
          <div>
            <h3 class="text-white font-semibold text-sm">DevVault Assistant</h3>
            <div class="flex items-center space-x-1">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-white/80 text-xs">En línea</span>
            </div>
          </div>
        </div>
        <button 
          id="chatbot-close"
          class="text-white/60 hover:text-white transition-colors"
        >
          <i data-feather="x" class="w-4 h-4"></i>
        </button>
      </div>
    </div>

    <!-- Messages Container -->
    <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3 h-64">
      <!-- Welcome Message -->
      <div class="flex items-start space-x-2">
        <div class="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
          <i data-feather="cpu" class="w-3 h-3 text-white"></i>
        </div>
        <div class="bg-slate-700 rounded-lg rounded-tl-none p-3 max-w-xs">
          <p class="text-gray-100 text-sm">¡Hola! 👋 Soy tu asistente de DevVault. Puedo ayudarte a:</p>
          <ul class="text-gray-300 text-xs mt-2 space-y-1">
            <li>• Encontrar recursos específicos</li>
            <li>• Recomendar tecnologías</li>
            <li>• Resolver dudas técnicas</li>
            <li>• Navegar por las secciones</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="px-4 py-2 border-t border-slate-700">
      <div class="flex flex-wrap gap-1 mb-2">
        <button class="quick-action px-2 py-1 bg-slate-700 hover:bg-slate-600 text-gray-300 text-xs rounded-md transition-colors">
          React vs Vue
        </button>
        <button class="quick-action px-2 py-1 bg-slate-700 hover:bg-slate-600 text-gray-300 text-xs rounded-md transition-colors">
          API Testing
        </button>
        <button class="quick-action px-2 py-1 bg-slate-700 hover:bg-slate-600 text-gray-300 text-xs rounded-md transition-colors">
          Mobile Apps
        </button>
      </div>
    </div>

    <!-- Input Area -->
    <div class="p-4 border-t border-slate-700">
      <div class="flex items-center space-x-2">
        <input 
          type="text" 
          id="chat-input"
          placeholder="Escribe tu pregunta..."
          class="flex-1 bg-slate-700 text-white text-sm px-3 py-2 rounded-lg focus:ring-2 focus:ring-purple-500 focus:outline-none placeholder-gray-400"
        />
        <button 
          id="send-message"
          class="bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-lg transition-colors"
        >
          <i data-feather="send" class="w-4 h-4"></i>
        </button>
      </div>
      <div class="flex items-center justify-between mt-2">
        <span class="text-xs text-gray-500">Presiona Enter para enviar</span>
        <div class="flex items-center space-x-1">
          <div class="w-1 h-1 bg-gray-600 rounded-full animate-pulse"></div>
          <div class="w-1 h-1 bg-gray-600 rounded-full animate-pulse" style="animation-delay: 0.2s"></div>
          <div class="w-1 h-1 bg-gray-600 rounded-full animate-pulse" style="animation-delay: 0.4s"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Notification Tooltip -->
  <div 
    id="chat-notification"
    class="absolute bottom-16 right-16 bg-slate-800 text-white text-sm px-3 py-2 rounded-lg border border-slate-600 shadow-lg opacity-0 transition-opacity duration-300 pointer-events-none"
  >
    ¡Nuevo mensaje! 💬
  </div>
</div>

<script>
class DevVaultChatbot {
  constructor() {
    this.isOpen = false;
    this.messages = [];
    this.isTyping = false;
    this.currentPage = document.title.includes('Frontend') ? 'Frontend' 
                    : document.title.includes('Backend') ? 'Backend'
                    : document.title.includes('Mobile') ? 'Mobile' 
                    : document.title.includes('Testing') ? 'Testing' : 'Home';
    this.init();
  }

  init() {
    this.bindEvents();
    this.setupQuickActions();
    this.showInitialNotification();
  }

  bindEvents() {
    const toggle = document.getElementById('chatbot-toggle');
    const close = document.getElementById('chatbot-close');
    const input = document.getElementById('chat-input');
    const send = document.getElementById('send-message');

    toggle?.addEventListener('click', () => this.toggleChat());
    close?.addEventListener('click', () => this.closeChat());
    send?.addEventListener('click', () => this.sendMessage());
    
    input?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        this.sendMessage();
      }
    });
  }

  setupQuickActions() {
    const quickActions = document.querySelectorAll('.quick-action');
    quickActions.forEach(action => {
      action.addEventListener('click', () => {
        const message = action.textContent.trim();
        this.handleUserMessage(message);
      });
    });
  }

  toggleChat() {
    this.isOpen = !this.isOpen;
    const window = document.getElementById('chatbot-window');
    const notification = document.getElementById('chat-notification');
    const unreadCount = document.getElementById('unread-count');
    
    if (this.isOpen) {
      window.classList.remove('opacity-0', 'scale-95', 'pointer-events-none');
      window.classList.add('opacity-100', 'scale-100');
      notification.classList.remove('opacity-100');
      notification.classList.add('opacity-0');
      unreadCount.style.display = 'none';
    } else {
      this.closeChat();
    }
  }

  closeChat() {
    this.isOpen = false;
    const window = document.getElementById('chatbot-window');
    window.classList.add('opacity-0', 'scale-95', 'pointer-events-none');
    window.classList.remove('opacity-100', 'scale-100');
  }

  sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (message) {
      this.addUserMessage(message);
      input.value = '';
      
      setTimeout(() => {
        this.generateBotResponse(message);
      }, 500);
    }
  }

  handleUserMessage(message) {
    this.addUserMessage(message);
    setTimeout(() => {
      this.generateBotResponse(message);
    }, 500);
  }

  addUserMessage(message) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start space-x-2 justify-end';
    
    messageDiv.innerHTML = `
      <div class="bg-purple-600 rounded-lg rounded-tr-none p-3 max-w-xs">
        <p class="text-white text-sm">${message}</p>
      </div>
      <div class="w-6 h-6 bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0">
        <i data-feather="user" class="w-3 h-3 text-white"></i>
      </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    this.scrollToBottom();
    
    if (typeof feather !== 'undefined') {
      feather.replace();
    }
  }

  addBotMessage(message, isHTML = false) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start space-x-2';
    
    const content = isHTML ? message : `<p class="text-gray-100 text-sm">${message}</p>`;
    
    messageDiv.innerHTML = `
      <div class="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
        <i data-feather="cpu" class="w-3 h-3 text-white"></i>
      </div>
      <div class="bg-slate-700 rounded-lg rounded-tl-none p-3 max-w-xs">
        ${content}
      </div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    this.scrollToBottom();
    
    if (typeof feather !== 'undefined') {
      feather.replace();
    }
  }

  generateBotResponse(userMessage) {
    const message = userMessage.toLowerCase();
    
    // Show typing indicator
    this.showTypingIndicator();
    
    setTimeout(() => {
      this.hideTypingIndicator();
      
      let response = this.getSmartResponse(message);
      this.addBotMessage(response, true);
    }, 1000 + Math.random() * 1000);
  }

  getSmartResponse(message) {
    // Technology recommendations
    if (message.includes('react') && message.includes('vue')) {
      return `
        <p class="text-gray-100 text-sm mb-2">🤔 ¡Excelente pregunta! Aquí tienes una comparación:</p>
        <div class="text-xs space-y-1">
          <div class="p-2 bg-blue-900/30 rounded border-l-2 border-blue-400">
            <strong class="text-blue-300">React:</strong> Más flexible, gran ecosistema, curva de aprendizaje media
          </div>
          <div class="p-2 bg-green-900/30 rounded border-l-2 border-green-400">
            <strong class="text-green-300">Vue:</strong> Más fácil de aprender, documentación excelente, menos complejo
          </div>
        </div>
        <p class="text-gray-300 text-xs mt-2">💡 Para principiantes: Vue. Para proyectos grandes: React</p>
      `;
    }

    if (message.includes('testing') || message.includes('test')) {
      return `
        <p class="text-gray-100 text-sm mb-2">🧪 El testing es fundamental! Te recomiendo:</p>
        <div class="text-xs space-y-1">
          <div>📋 <strong>Unit Tests:</strong> Jest, Vitest</div>
          <div>🌐 <strong>E2E Tests:</strong> Cypress, Playwright</div>
          <div>🔧 <strong>API Tests:</strong> Postman, Insomnia</div>
        </div>
        <div class="mt-2">
          <a href="/testing" class="text-orange-400 hover:text-orange-300 text-xs underline">Ver recursos de Testing →</a>
        </div>
      `;
    }

    if (message.includes('mobile') || message.includes('app')) {
      return `
        <p class="text-gray-100 text-sm mb-2">📱 Para desarrollo móvil, tienes varias opciones:</p>
        <div class="text-xs space-y-1">
          <div>⚡ <strong>Cross-platform:</strong> React Native, Flutter</div>
          <div>🍎 <strong>iOS Nativo:</strong> Swift, SwiftUI</div>
          <div>🤖 <strong>Android Nativo:</strong> Kotlin, Java</div>
        </div>
        <div class="mt-2">
          <a href="/mobile" class="text-pink-400 hover:text-pink-300 text-xs underline">Explorar Mobile Dev →</a>
        </div>
      `;
    }

    if (message.includes('backend') || message.includes('api') || message.includes('servidor')) {
      return `
        <p class="text-gray-100 text-sm mb-2">🔧 Para backend, estas son las mejores opciones:</p>
        <div class="text-xs space-y-1">
          <div>🟨 <strong>JavaScript:</strong> Node.js, Express, Fastify</div>
          <div>🐍 <strong>Python:</strong> Django, FastAPI, Flask</div>
          <div>💎 <strong>Otros:</strong> Spring Boot, Laravel, ASP.NET</div>
        </div>
        <div class="mt-2">
          <a href="/backend" class="text-green-400 hover:text-green-300 text-xs underline">Ver recursos Backend →</a>
        </div>
      `;
    }

    if (message.includes('frontend') || message.includes('interfaz')) {
      return `
        <p class="text-gray-100 text-sm mb-2">💻 Para frontend moderno, considera:</p>
        <div class="text-xs space-y-1">
          <div>⚛️ <strong>Frameworks:</strong> React, Vue, Angular, Svelte</div>
          <div>🎨 <strong>Styling:</strong> Tailwind CSS, Styled Components</div>
          <div>📦 <strong>Build Tools:</strong> Vite, Webpack, Parcel</div>
        </div>
        <div class="mt-2">
          <a href="/frontend" class="text-blue-400 hover:text-blue-300 text-xs underline">Explorar Frontend →</a>
        </div>
      `;
    }

    // Navigation help
    if (message.includes('navegar') || message.includes('sección') || message.includes('página')) {
      return `
        <p class="text-gray-100 text-sm mb-2">🧭 Te ayudo a navegar por DevVault:</p>
        <div class="text-xs space-y-1">
          <div><a href="/" class="text-gray-400 hover:text-white">🏠 Inicio</a> - Recursos destacados</div>
          <div><a href="/frontend" class="text-blue-400 hover:text-blue-300">💻 Frontend</a> - React, Vue, Angular...</div>
          <div><a href="/backend" class="text-green-400 hover:text-green-300">🔧 Backend</a> - APIs, bases de datos...</div>
          <div><a href="/mobile" class="text-pink-400 hover:text-pink-300">📱 Mobile</a> - Apps nativas y híbridas</div>
          <div><a href="/testing" class="text-orange-400 hover:text-orange-300">🧪 Testing</a> - Frameworks de pruebas</div>
        </div>
      `;
    }

    // Current page specific help
    if (message.includes('ayuda') || message.includes('help')) {
      const pageHelp = this.getPageSpecificHelp();
      return pageHelp;
    }

    // Default responses
    const defaultResponses = [
      'Interesante pregunta! 🤔 ¿Podrías ser más específico sobre qué tecnología te interesa?',
      '¡Genial! Puedo ayudarte con eso. ¿Buscas algo en particular sobre desarrollo web?',
      'Me encanta esa pregunta! 💡 ¿Te interesa más el frontend, backend, mobile o testing?',
      'Excelente! En DevVault tenemos muchos recursos. ¿Qué nivel tienes: principiante, intermedio o avanzado?',
      '¡Perfecto! 🚀 ¿Quieres que te recomiende recursos específicos o prefieres explorar por categorías?'
    ];

    return `<p class="text-gray-100 text-sm">${defaultResponses[Math.floor(Math.random() * defaultResponses.length)]}</p>`;
  }

  getPageSpecificHelp() {
    const helps = {
      'Frontend': `
        <p class="text-gray-100 text-sm mb-2">💻 Estás en la sección Frontend! Aquí puedes:</p>
        <div class="text-xs space-y-1 text-gray-300">
          <div>🔍 Buscar frameworks como React, Vue, Angular</div>
          <div>🎨 Explorar herramientas de CSS y diseño</div>
          <div>📚 Filtrar por categorías: Framework, CSS, Lenguaje</div>
          <div>❤️ Marcar recursos como favoritos</div>
        </div>
      `,
      'Backend': `
        <p class="text-gray-100 text-sm mb-2">🔧 Estás en la sección Backend! Puedes:</p>
        <div class="text-xs space-y-1 text-gray-300">
          <div>🗄️ Explorar bases de datos y ORMs</div>
          <div>🌐 Encontrar frameworks para APIs REST</div>
          <div>🔒 Recursos de autenticación y seguridad</div>
          <div>☁️ Herramientas de deployment y DevOps</div>
        </div>
      `,
      'Mobile': `
        <p class="text-gray-100 text-sm mb-2">📱 Estás en Mobile Development! Aquí:</p>
        <div class="text-xs space-y-1 text-gray-300">
          <div>⚛️ Frameworks cross-platform (React Native, Flutter)</div>
          <div>🍎 Desarrollo nativo iOS (Swift, SwiftUI)</div>
          <div>🤖 Desarrollo nativo Android (Kotlin, Java)</div>
          <div>🔧 Herramientas y SDK móviles</div>
        </div>
      `,
      'Testing': `
        <p class="text-gray-100 text-sm mb-2">🧪 Estás en Testing! Explora:</p>
        <div class="text-xs space-y-1 text-gray-300">
          <div>📋 Unit testing frameworks (Jest, Vitest)</div>
          <div>🌐 E2E testing tools (Cypress, Playwright)</div>
          <div>🔧 API testing (Postman, Insomnia)</div>
          <div>🤖 Automation y CI/CD</div>
        </div>
      `
    };

    return helps[this.currentPage] || `
      <p class="text-gray-100 text-sm mb-2">🏠 ¡Bienvenido a DevVault!</p>
      <div class="text-xs space-y-1 text-gray-300">
        <div>Explora miles de recursos para desarrolladores</div>
        <div>Navega por las diferentes secciones</div>
        <div>Usa la búsqueda para encontrar tecnologías específicas</div>
        <div>Marca tus recursos favoritos</div>
      </div>
    `;
  }

  showTypingIndicator() {
    this.isTyping = true;
    const messagesContainer = document.getElementById('chat-messages');
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'flex items-start space-x-2';
    
    typingDiv.innerHTML = `
      <div class="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center flex-shrink-0">
        <i data-feather="cpu" class="w-3 h-3 text-white"></i>
      </div>
      <div class="bg-slate-700 rounded-lg rounded-tl-none p-3">
        <div class="flex space-x-1">
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
          <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(typingDiv);
    this.scrollToBottom();
    
    if (typeof feather !== 'undefined') {
      feather.replace();
    }
  }

  hideTypingIndicator() {
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
    this.isTyping = false;
  }

  scrollToBottom() {
    const messagesContainer = document.getElementById('chat-messages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  showInitialNotification() {
    setTimeout(() => {
      if (!this.isOpen) {
        const notification = document.getElementById('chat-notification');
        notification.classList.remove('opacity-0');
        notification.classList.add('opacity-100');
        
        setTimeout(() => {
          notification.classList.add('opacity-0');
          notification.classList.remove('opacity-100');
        }, 3000);
      }
    }, 2000);
  }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  // Initialize Feather icons first
  if (typeof feather !== 'undefined') {
    feather.replace();
  }
  
  // Initialize chatbot
  new DevVaultChatbot();
});
</script>

<style>
/* Chatbot animations */
#chatbot-toggle {
  animation: pulse-ring 2s infinite;
}

@keyframes pulse-ring {
  0% {
    box-shadow: 0 0 0 0 rgba(139, 92, 246, 0.7);
  }
  70% {
    box-shadow: 0 0 0 10px rgba(139, 92, 246, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(139, 92, 246, 0);
  }
}

/* Message animations */
#chat-messages > div {
  animation: slideInMessage 0.3s ease-out;
}

@keyframes slideInMessage {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Scrollbar styling */
#chat-messages::-webkit-scrollbar {
  width: 4px;
}

#chat-messages::-webkit-scrollbar-track {
  background: transparent;
}

#chat-messages::-webkit-scrollbar-thumb {
  background: rgba(139, 92, 246, 0.3);
  border-radius: 2px;
}

#chat-messages::-webkit-scrollbar-thumb:hover {
  background: rgba(139, 92, 246, 0.5);
}
</style>