---
export interface Props {
  totalResources: number;
  activeFilters: number;
  viewMode?: string;
}

const { totalResources, activeFilters, viewMode = "grid" } = Astro.props;
---

<div class="flex items-center justify-between bg-slate-800/30 rounded-xl p-4 border border-slate-700/50 backdrop-blur-sm">
  <div class="flex items-center space-x-4">
    <h2 class="text-2xl md:text-3xl font-semibold text-white">
      Recursos (<span id="resource-count" class="text-blue-400 counter" data-count={totalResources}>0</span>)
    </h2>
    
    <div class="flex items-center space-x-2 text-sm text-gray-400">
      <i data-feather="filter" class="w-4 h-4"></i>
      <span>Filtros activos: <span id="active-filters" class="text-purple-400">0</span></span>
    </div>
  </div>

  <div class="flex items-center space-x-3">
    <!-- View Mode Toggle -->
    <div class="flex bg-slate-700/50 rounded-lg p-1 border border-slate-600/50">
      <button 
        class="view-toggle px-3 py-1.5 text-sm rounded-md transition-all duration-200 text-white bg-slate-600" 
        data-view="grid"
      >
        <i data-feather="grid" class="w-4 h-4"></i>
      </button>
      <button 
        class="view-toggle px-3 py-1.5 text-sm rounded-md transition-all duration-200 text-gray-400 hover:text-white" 
        data-view="list"
      >
        <i data-feather="list" class="w-4 h-4"></i>
      </button>
    </div>

    <!-- Sort Options -->
    <select class="bg-slate-700 text-white rounded-lg px-3 py-1.5 text-sm border border-slate-600 focus:ring-2 focus:ring-purple-500 focus:outline-none" id="sort-select">
      <option value="default">Orden por defecto</option>
      <option value="name">Nombre A-Z</option>
      <option value="category">Categoría</option>
      <option value="popular">Más populares</option>
    </select>

    <!-- Clear Filters -->
    <button 
      id="clear-filters"
      class="px-3 py-1.5 text-sm text-gray-400 hover:text-white transition-colors duration-200 hidden bg-red-500/20 hover:bg-red-500/30 rounded-lg border border-red-500/30"
    >
      <i data-feather="x" class="w-3 h-3 inline mr-1"></i>
      Limpiar filtros
    </button>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // View mode toggle
  const viewToggles = document.querySelectorAll('.view-toggle');
  const cardsContainer = document.getElementById('cards-container');
  
  viewToggles.forEach(toggle => {
    toggle.addEventListener('click', () => {
      const viewMode = toggle.dataset.view;
      
      // Update button states
      viewToggles.forEach(t => {
        t.classList.remove('bg-slate-600', 'text-white');
        t.classList.add('text-gray-400');
      });
      
      toggle.classList.add('bg-slate-600', 'text-white');
      toggle.classList.remove('text-gray-400');
      
      // Update container layout
      if (cardsContainer) {
        if (viewMode === 'list') {
          cardsContainer.className = 'space-y-4';
          // Add list view classes to cards
          const cards = cardsContainer.querySelectorAll('.card-item > div');
          cards.forEach(card => {
            card.classList.add('flex', 'flex-row', 'max-w-none', 'h-32');
          });
        } else {
          cardsContainer.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6';
          // Remove list view classes
          const cards = cardsContainer.querySelectorAll('.card-item > div');
          cards.forEach(card => {
            card.classList.remove('flex', 'flex-row', 'max-w-none', 'h-32');
          });
        }
      }
    });
  });

  // Sort functionality
  const sortSelect = document.getElementById('sort-select');
  if (sortSelect) {
    sortSelect.addEventListener('change', (e) => {
      const sortBy = e.target.value;
      const container = document.getElementById('cards-container');
      if (!container) return;

      const cards = Array.from(container.querySelectorAll('.card-item'));
      
      cards.sort((a, b) => {
        switch(sortBy) {
          case 'name':
            return a.dataset.title.localeCompare(b.dataset.title);
          case 'category':
            return a.dataset.category.localeCompare(b.dataset.category);
          case 'popular':
            // Random for demo purposes
            return Math.random() - 0.5;
          default:
            return 0;
        }
      });

      // Re-append sorted cards
      cards.forEach((card, index) => {
        container.appendChild(card);
        // Stagger animation
        card.style.animationDelay = `${index * 50}ms`;
      });
    });
  }
});
</script>