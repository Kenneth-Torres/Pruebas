---
import Layout from "../layouts/Layout.astro";
import UnsplashCard from "../components/Card.astro";
import Search from "../components/Search.astro";
import ButtonFilter from "../components/ButtonFilter.astro";

// Definir el tipo de las cards
interface Card {
  id: number;
  title: string;
  subtitle: string;
  description: string;
  iconSrc: string;
  iconBg: string;
  cardBg: string;
  category: string;
  url: string;
}

// Cargar datos del archivo JSON
let cards: Card[] = [];

try {
  const response = await import("../data/Mobile.json");
  const data = response.default || response;
  cards = data.cards || [];
} catch (error) {
  console.error("Error cargando JSON:", error);
  cards = [];
}

// Obtener categorÃ­as Ãºnicas
const categories = ['Todos', ...Array.from(new Set(cards.map(card => card.category)))];
---

<Layout
  title="DevVault - Herramientas para desarrollo Mobile"
>
  <div class="max-w-[1400px] mx-auto px-4 md:px-0">
    <!-- Header -->
    <header class="mb-10">
      <div class="mt-7">
        <h1 class="text-3xl md:text-4xl font-bold text-white mb-4">
          ðŸ“± Mobile Development
        </h1>
        <p class="text-gray-400 mb-6">
          Frameworks, herramientas y lenguajes para crear aplicaciones mÃ³viles nativas y multiplataforma.
        </p>
        <Search />
      </div>

      <div class="flex flex-wrap gap-2 mt-6">
        {categories.map(category => (
          <ButtonFilter label={category} />
        ))}
      </div>
    </header>

    <!-- Contador de recursos -->
    <section class="mb-6">
      <div class="flex items-center justify-between">
        <h2 class="text-2xl md:text-3xl font-semibold text-white">
          Recursos (<span id="resource-count">{cards.length}</span>)
        </h2>
        <button 
          id="clear-filters"
          class="text-sm text-gray-400 hover:text-white transition-colors duration-200 hidden"
        >
          Limpiar filtros
        </button>
      </div>
    </section>

    <!-- Recursos Grid -->
    <section>
      <div
        id="cards-container"
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
      >
        {cards.map((card) => (
          <div class="card-item" data-category={card.category} data-title={card.title.toLowerCase()} data-description={card.description.toLowerCase()}>
            <UnsplashCard
              title={card.title}
              subtitle={card.subtitle}
              description={card.description}
              iconSrc={card.iconSrc}
              iconBg={card.iconBg}
              cardBg={card.cardBg}
              category={card.category}
              url={card.url}
            />
          </div>
        ))}
      </div>

      <!-- Mensaje cuando no hay resultados -->
      <div id="no-results" class="hidden text-center py-16">
        <div class="mb-6">
          <i data-feather="search" class="w-16 h-16 mx-auto text-gray-600"></i>
        </div>
        <h3 class="text-xl font-medium text-gray-300 mb-2">No se encontraron recursos</h3>
        <p class="text-gray-500">Intenta cambiar los filtros o el tÃ©rmino de bÃºsqueda</p>
      </div>
    </section>

    <!-- GuÃ­a de desarrollo mÃ³vil -->
    <section class="mt-16 p-8 rounded-2xl bg-gradient-to-r from-purple-900/20 to-pink-900/20 border border-white/10">
      <h3 class="text-2xl font-bold text-white mb-4">ðŸš€ Â¿QuÃ© enfoque elegir?</h3>
      <div class="grid md:grid-cols-3 gap-6 text-gray-300 mb-6">
        <div class="p-4 rounded-lg bg-blue-900/20 border border-blue-800/30">
          <h4 class="text-lg font-semibold text-blue-300 mb-2">Cross-Platform</h4>
          <p class="text-sm mb-3">Un cÃ³digo para iOS y Android</p>
          <div class="space-y-1 text-xs">
            <div>â€¢ React Native</div>
            <div>â€¢ Flutter</div>
            <div>â€¢ Xamarin</div>
          </div>
        </div>
        <div class="p-4 rounded-lg bg-green-900/20 border border-green-800/30">
          <h4 class="text-lg font-semibold text-green-300 mb-2">Native iOS</h4>
          <p class="text-sm mb-3">MÃ¡ximo rendimiento en iOS</p>
          <div class="space-y-1 text-xs">
            <div>â€¢ Swift</div>
            <div>â€¢ Objective-C</div>
            <div>â€¢ SwiftUI</div>
          </div>
        </div>
        <div class="p-4 rounded-lg bg-purple-900/20 border border-purple-800/30">
          <h4 class="text-lg font-semibold text-purple-300 mb-2">Native Android</h4>
          <p class="text-sm mb-3">Optimizado para Android</p>
          <div class="space-y-1 text-xs">
            <div>â€¢ Kotlin</div>
            <div>â€¢ Java</div>
            <div>â€¢ Jetpack Compose</div>
          </div>
        </div>
      </div>
      
      <div class="border-t border-white/10 pt-6">
        <h4 class="text-lg font-semibold text-white mb-3">Recursos relacionados</h4>
        <div class="flex flex-wrap gap-3">
          <a href="/backend" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
            APIs para Mobile
          </a>
          <a href="/testing" class="px-4 py-2 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
            Testing Mobile
          </a>
          <a href="/frontend" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
            Web Mobile
          </a>
        </div>
      </div>
    </section>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize Feather icons
      if (typeof feather !== 'undefined') {
        feather.replace();
      }
      
      // Initialize filters using shared functionality
      if (typeof window.initializeFilters === 'function') {
        window.initializeFilters();
      } else {
        // Fallback initialization if shared script not loaded
        setTimeout(() => {
          if (typeof window.initializeFilters === 'function') {
            window.initializeFilters();
          }
        }, 100);
      }
    });
  </script>
</Layout>